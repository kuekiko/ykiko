<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM on ykikoqAq</title><link>https://ykiko.top/categories/arm/</link><description>Recent content in ARM on ykikoqAq</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 03 Aug 2019 12:26:24 +0800</lastBuildDate><atom:link href="https://ykiko.top/categories/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>ARM-PWN从入门到放弃0x00-环境准备</title><link>https://ykiko.top/p/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Sat, 03 Aug 2019 12:26:24 +0800</pubDate><guid>https://ykiko.top/p/arm-pwn%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%830x00-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>&lt;h3 id="0x00-前言">0x00 前言&lt;/h3>
&lt;p>学PWN也有一段时间了，x86/x86_64 下算是入了个门，平时接触ARM比较多，正好以ARM架构下再更加深入的学习PWN。&lt;/p>
&lt;p>会用的工具、环境：&lt;/p>
&lt;ul>
&lt;li>在Ubuntu 18.04/WSL2&lt;/li>
&lt;li>Docker for wsl2&lt;/li>
&lt;li>树莓派3B+&lt;/li>
&lt;li>qemu&lt;/li>
&lt;li>unicorn&lt;/li>
&lt;li>IDA&lt;/li>
&lt;li>Radare2&lt;/li>
&lt;li>GDB+gef+pwndbg+peda&lt;/li>
&lt;li>pwntools&lt;/li>
&lt;/ul>
&lt;h3 id="0x01-环境安装">0x01 环境安装&lt;/h3>
&lt;p>这里选用的有两种环境&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ARM设备 树莓派&lt;/p>
&lt;p>之前618买了树莓派，派上用场了。&lt;/p>
&lt;p>把PI的官方系统换成了Ubuntu 18.04。&lt;/p>
&lt;p>安装了GCC 、gdb、gef（经测试只有gef能用），其他也没什么需要装的。&lt;/p>
&lt;p>关闭地址随机化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo cat /proc/sys/kernel/randomize_va_space &lt;span class="c1"># 状态查看&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> &lt;span class="c1"># 开启中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo &lt;span class="nb">echo&lt;/span> &lt;span class="m">0&lt;/span> &amp;gt; /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash: /proc/sys/kernel/randomize_va_space: Permission denied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="m">0&lt;/span> &amp;gt; /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /proc/sys/kernel/randomize_va_space
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="c1">#这就OK&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>QEMU 模拟 (WSL2)&lt;/p>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#防止又出什么乱七八糟的错误和需求，尽量都装上&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt install gdb gdb-multiarch &lt;span class="c1">##&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt install qemu &lt;span class="c1">##&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt install gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu &lt;span class="c1">##gcc arm 依赖库安装&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="0x02-启动和调试">0x02 启动和调试&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>树莓派&lt;/p>
&lt;p>直接运行&lt;/p>
&lt;p>进行socat绑定端口 就OK&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">socat tcp-listen:6666,fork exec:./binfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>QEMU&lt;/p>
&lt;ul>
&lt;li>32bit&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 本地GDB调试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-arm -g &lt;span class="m">1234&lt;/span> -L /usr/arm-linux-gnueabi ./binfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gdb-multiarch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">target remote localhost:1234
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 绑定运行到指定端口 远程调试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socat tcp-l:10002,fork exec:&lt;span class="s2">&amp;#34;qemu-arm -L /usr/arm-linux-gnueabi ./binfile&amp;#34;&lt;/span>,reuseaddr &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># + -g 方便调试 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socat tcp-l:10002,fork exec:&lt;span class="s2">&amp;#34;qemu-arm -g 1234 -L /usr/arm-linux-gnueabi ./binfile&amp;#34;&lt;/span>,reuseaddr &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>64bit&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 本地调试 -g 等待GDB调试&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qemu-aarch64 -g &lt;span class="m">1111&lt;/span> -L /usr/aarch64-linux-gnu ./file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socat tcp-l:10002,fork exec:&lt;span class="s2">&amp;#34;qemu-aarch64 -L /usr/aarch64-linux-gnu ./binfile&amp;#34;&lt;/span>,reuseaddr &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">socat tcp-l:10002,fork exec:&lt;span class="s2">&amp;#34;qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu ./binfile&amp;#34;&lt;/span>,reuseaddr &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="0x03-调试过程">0x03 调试过程&lt;/h3>
&lt;p>在树莓派直接gdb调试就行。省略。。。&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190804221031.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>使用qemu+gdb-multiarch+插件进行调试步骤&lt;/p>
&lt;p>&lt;code>qemu-aarch64 -g 10002 -L /usr/aarch64-linux-gnu ./baby_arm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gdb-multiarch ./baby_arm -q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">target remote:10002
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190804225625.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h3 id="0x04-题目搭建">0x04 题目搭建&lt;/h3>
&lt;p>基于&lt;a class="link" href="https://github.com/Eadom/ctf_xinetd" target="_blank" rel="noopener"
>ctf_xinetd&lt;/a>项目自己改了一个&lt;/p>
&lt;p>地址：&lt;a class="link" href="https://github.com/Vorblock/CTF_arm_xinetd" target="_blank" rel="noopener"
>CTF_ARM_xinetd&lt;/a>&lt;/p>
&lt;h3 id="0x05-参考链接">0x05 参考链接&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://xz.aliyun.com/t/3154" target="_blank" rel="noopener"
>https://xz.aliyun.com/t/3154&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Eadom/ctf_xinetd" target="_blank" rel="noopener"
>https://github.com/Eadom/ctf_xinetd&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/bkerler/exploit_me" target="_blank" rel="noopener"
>https://github.com/bkerler/exploit_me&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Raspberry Pi 3B+ 0安装使用</title><link>https://ykiko.top/p/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 23 Jun 2019 01:14:22 +0800</pubDate><guid>https://ykiko.top/p/raspberry-pi-3b-0%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="raspberry-pi-3b-0安装使用">Raspberry Pi 3B+ 0安装使用&lt;/h2>
&lt;h3 id="0x00-购买">0x00 购买&lt;/h3>
&lt;p>终于下手买了。打算用来学习ARM、以及一些硬件的知识。&lt;/p>
&lt;ul>
&lt;li>3B+ 裸机&lt;/li>
&lt;li>32G SD card&lt;/li>
&lt;li>散热片&lt;/li>
&lt;li>保护壳&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623005746.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x01-安装系统">0x01 安装系统&lt;/h3>
&lt;p>首先下载系统镜像。&lt;/p>
&lt;p>官网有挺多系统可以选择，这里选择了安装&lt;a class="link" href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener"
>Raspbian&lt;/a> desktop最新版&lt;/p>
&lt;p>之后打算装Lite版，手上没有多余的显示器。而且桌面版占用很高。&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190622221745.png"
loading="lazy"
>&lt;/p>
&lt;p>迅雷，3分钟搞定。&lt;/p>
&lt;p>其次开始向SD卡中写镜像。&lt;/p>
&lt;p>买的32G闪迪的高速卡，现在32G都白菜价了，想想几年前16G的死贵。&lt;/p>
&lt;p>官方教程用的是&lt;a class="link" href="https://etcher.io/" target="_blank" rel="noopener"
>Etcher&lt;/a> ，也可以用&lt;a class="link" href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener"
>Win32DiskImager&lt;/a>。这里省事还是用Etcher。&lt;/p>
&lt;p>步骤&lt;/p>
&lt;ol>
&lt;li>下载&lt;a class="link" href="https://etcher.io/" target="_blank" rel="noopener"
>etcher.io&lt;/a>安装包安装Etcher](&lt;a class="link" href="https://etcher.io/" target="_blank" rel="noopener"
>https://etcher.io/&lt;/a>)&lt;/li>
&lt;li>运行Etcher,选择镜像和sd卡&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190622222523.png"
loading="lazy"
>&lt;/p>
&lt;ol start="3">
&lt;li>Flash一键搞定。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190622223043.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x02-配置">0x02 配置&lt;/h3>
&lt;p>系统安装完，开始进行配置。&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623003205.png"
loading="lazy"
>&lt;/p>
&lt;p>先连上显示器看看&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623003758.png"
loading="lazy"
>&lt;/p>
&lt;p>然而平时显示器还是要连笔记本，而且这分辨率好糊。所以还是配ssh和VNC连接使用吧。&lt;/p>
&lt;ul>
&lt;li>修改源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>sudo apt update&lt;/code>&lt;/p>
&lt;ul>
&lt;li>拓展SD卡&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sudo raspi-config&lt;/code> -&amp;gt; Advanced Opt -&amp;gt; A1 Expand Filesystem&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623140154.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>ssh 配置&lt;/li>
&lt;/ul>
&lt;p>最新版系统直接想要的接口打开就OK&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623004049.png"
loading="lazy"
>&lt;/p>
&lt;p>允许root登陆，修改&lt;code>/etc/ssh/sshd.conf&lt;/code> 下的&lt;code>PermitRootLogin yes&lt;/code>
&lt;code>StrictModes yes&lt;/code> 就ok。&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623004313.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>VNC&lt;/li>
&lt;/ul>
&lt;p>win10下载&lt;a class="link" href="https://www.realvnc.com" target="_blank" rel="noopener"
>vnc客户端&lt;/a>&lt;/p>
&lt;p>RaspberryPI 命令开启server:&lt;code>vncserver&lt;/code>&lt;/p>
&lt;p>连接成功：&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623004603.png"
loading="lazy"
>&lt;/p>
&lt;p>连接出现分辨率问题&lt;/p>
&lt;p>设置分辨率：命令&lt;code>sudo raspi-config&lt;/code>-&amp;gt;Advanced Opt -&amp;gt;Resolution选择分辨率。重启就完事。&lt;/p>
&lt;h3 id="0x04-硬件检查">0x04 硬件检查&lt;/h3>
&lt;ol>
&lt;li>系统镜像版本号&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623005614.png"
loading="lazy"
>&lt;/p>
&lt;ol start="2">
&lt;li>板子型号：&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623005511.png"
loading="lazy"
>&lt;/p>
&lt;ol start="3">
&lt;li>&lt;strong>系统固件版本号&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623005714.png"
loading="lazy"
>&lt;/p>
&lt;p>看看硬件：&lt;/p>
&lt;ol>
&lt;li>usb&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623010117.png"
loading="lazy"
>&lt;/p>
&lt;ol start="2">
&lt;li>cpu&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623010156.png"
loading="lazy"
>&lt;/p>
&lt;p>说好的v8?&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623010258.png"
loading="lazy"
>&lt;/p>
&lt;ol start="3">
&lt;li>网卡&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623010503.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://my-md-1253484710.file.myqcloud.com/20190623010528.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="0x05-总结">0x05 总结&lt;/h3>
&lt;p>闲了很久，现在终于动手搞自己想搞的东西，花了一个晚上，搞完这些简单的安装配置，挺费时费力的，不过自己开心就好。最好是自己能够坚持下去，做更多有趣的事。&lt;/p>
&lt;p>&lt;img src="https://as2.bitinn.net/uploads/5d/cjvmpwzcf000bx38hgr1oua5d.1080p.jpg"
loading="lazy"
alt="12"
>&lt;/p></description></item><item><title>Android-ARM进阶</title><link>https://ykiko.top/p/android-arm%E8%BF%9B%E9%98%B6/</link><pubDate>Wed, 10 Oct 2018 16:40:20 +0800</pubDate><guid>https://ykiko.top/p/android-arm%E8%BF%9B%E9%98%B6/</guid><description>&lt;p>学习一些关于ARM的汇编结构特点，以及分析。理解一些结构最好的方法就是多去尝试动手做。。&lt;/p>
&lt;h3 id="ndk-build的使用">NDK-Build的使用&lt;/h3>
&lt;p>可以参考&lt;a class="link" href="https://developer.android.com/ndk/guides/ndk-build?hl=zh-cn" target="_blank" rel="noopener"
>官方文档&lt;/a>。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建一个Android项目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>cd 项目目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;ndk>/ndk-build 。也可以将NDK-build加入环境变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建jni文件夹，添加 Android.mk和 Application.mk两个文件。（参考官方文档）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mk" data-lang="mk">&lt;span class="line">&lt;span class="cl">&lt;span class="err">//Android.mk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LOCAL_PATH&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">$(&lt;/span>call my-dir&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">include&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">CLEAR_VARS&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 要生成的.so库名称
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nv">LOCAL_MODULE&lt;/span> &lt;span class="o">:=&lt;/span> hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># c++文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nv">LOCAL_SRC_FILES&lt;/span> &lt;span class="o">:=&lt;/span> hello.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">include&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">BUILD_SHARED_LIBRARY&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mk" data-lang="mk">&lt;span class="line">&lt;span class="cl">&lt;span class="err">//Application.mk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">APP_PLATFORM&lt;/span> &lt;span class="o">:=&lt;/span> android-17
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># APP_ABI := all
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="nv">APP_ABI&lt;/span> &lt;span class="o">:=&lt;/span>armeabi-v7a arm64-v8a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加hello.cpp：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* code */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello,world!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;num value is %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>ndk-build&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180814152220.png"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>push 到Android设备运行&lt;/p>
&lt;p>这里ARM32位出现里非法引用（Illegal instruction）。。之后再试试&lt;/p>
&lt;p>改成ARM64之后又出现内存区段错误“Segmentation fault” 有毒呀。。可能是哪里设置有问题。。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="arm-linux-gcc交叉编译器编译">arm-linux-gcc交叉编译器编译&lt;/h3>
&lt;p>arm-linux-gcc也能编译出ARM可执行文件。&lt;code>sudo apt install g++-arm-linux-gnueabihf &lt;/code>&lt;/p>
&lt;p>或者下载&lt;a class="link" href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads" target="_blank" rel="noopener"
>二进制&lt;/a>文件安装。&lt;/p>
&lt;p>&lt;code>arm-linux-gnueabihf-g++  -static  helloworld.cpp &lt;/code>&lt;/p>
&lt;p>push进Android之后运行成功&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180814164353.png"
loading="lazy"
>&lt;/p>
&lt;p>使用这个方法和用NDK-build编译的有差异。&lt;/p>
&lt;h3 id="for循环">for循环&lt;/h3>
&lt;p>待添加&lt;/p>
&lt;h3 id="if-else">if-else&lt;/h3>
&lt;p>待添加&lt;/p>
&lt;h3 id="while">while&lt;/h3>
&lt;h3 id="switch">switch&lt;/h3>
&lt;h3 id="优化">优化&lt;/h3>
&lt;p>###C++&lt;/p>
&lt;h3 id="jni-api分析">JNI API分析&lt;/h3></description></item><item><title>ARM汇编基础</title><link>https://ykiko.top/p/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</link><pubDate>Fri, 10 Aug 2018 19:34:10 +0800</pubDate><guid>https://ykiko.top/p/arm%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="arm汇编基础简">ARM汇编基础(简)&lt;/h2>
&lt;p>经常忘记，做个笔记，好作复习。。&lt;/p>
&lt;p>内容主要来源于《Android软件安全与逆向分析》和《逆向工程权威指南》以及 &lt;a class="link" href="https://www.anquanke.com/post/id/86383" target="_blank" rel="noopener"
>ARM 汇编&lt;/a> 和&lt;a class="link" href="https://azeria-labs.com/writing-arm-assembly-part-1/" target="_blank" rel="noopener"
>Azeria-labs&lt;/a>&lt;/p>
&lt;h3 id="arm架构">ARM架构&lt;/h3>
&lt;p>ARM属于RISC CPU，&lt;/p>
&lt;ul>
&lt;li>ARM模式 4个字节opcode 32位&lt;/li>
&lt;li>Thumb模式 2个字节opcode 16位&lt;/li>
&lt;li>Thumb-2模式 同上（只是有部分4个字节的opcode)&lt;/li>
&lt;li>64位ARM 4个字节opcode&lt;/li>
&lt;li>ARM机器码在版本3之前是小端。但是之后默认采用大端格式，但可以设置切换到小端。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810112415.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="数据类型">数据类型&lt;/h3>
&lt;p>数据类型在汇编语言中的扩展后缀为**-h&lt;strong>或者&lt;/strong>-sh&lt;strong>对应着半字，&lt;/strong>-b&lt;strong>或者&lt;/strong>-sb**对应着字节，但是对于字并没有对应的扩展&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810113108.png"
loading="lazy"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ldr&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">加载字，宽度四字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ldrh&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">加载无符号的半字，宽度两字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ldrsh&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">加载有符号的半字，宽度两字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ldrb&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">加载无符号的字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ldrsb&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">加载有符号的字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">str&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">存储字，宽度四字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">strh&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">存储无符号的半字，宽度两字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">strsh&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">存储有符号的半字，宽度两字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">strb&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">存储无符号的字节&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">strsb&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">存储有符号的字节&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字节序">字节序&lt;/h3>
&lt;p>在内存中有两种字节排布顺序，大端序(BE)或者小端序(LE)。两者的主要不同是对象中的每个字节在内存中的存储顺序存在差异。一般X86中是小端序，最低的字节存储在最低的地址上。在大端机中最高的字节存储在最低的地址上。&lt;/p>
&lt;p>&lt;img src="https://p0.ssl.qhimg.com/t01b6d7f41b02b0a58d.png"
loading="lazy"
>&lt;/p>
&lt;p>数据访问时采取大端序还是小端序使用程序状态寄存器(CPSR)的第9比特位来决定的。&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810120701.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="寄存器">寄存器&lt;/h3>
&lt;p>37个32位寄存器，其中31个为基础寄存器，6个为状态寄存器。&lt;/p>
&lt;p>用户模式下有&lt;/p>
&lt;ul>
&lt;li>不分组寄存器（R0-R7） R7一般存放系统调用号&lt;/li>
&lt;li>分组寄存器（R8-R14）&lt;/li>
&lt;li>程序计数器（R15）&lt;/li>
&lt;li>单前程序状态寄存器（CPSR）&lt;/li>
&lt;/ul>
&lt;p>两种状态：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">ARM状态（32位对齐）&lt;/th>
&lt;th style="text-align:center">Thumb状态(16位对齐)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">R0-R7&lt;/td>
&lt;td style="text-align:center">R0-R7(相同)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">CPSR&lt;/td>
&lt;td style="text-align:center">CPSR（同）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">R11&lt;/td>
&lt;td style="text-align:center">FP（栈帧指针）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">R12&lt;/td>
&lt;td style="text-align:center">IP（内部程序调用）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">R13&lt;/td>
&lt;td style="text-align:center">SP（栈指针）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">R14&lt;/td>
&lt;td style="text-align:center">LR（链接寄存器）一般存放函数返回地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">R15&lt;/td>
&lt;td style="text-align:center">PC（程序计数器）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>和x86对比：&lt;img src="https://p5.ssl.qhimg.com/t01a8e5d24fa91f9f0f.jpg"
loading="lazy"
>&lt;/p>
&lt;p>CSPR:&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810122226.png"
loading="lazy"
>&lt;/p>
&lt;p>32位的CPSR寄存器的比特位含义，左边是最大比特位，右边是最小比特位。每个单元代表一个比特。&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810122258.png"
loading="lazy"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>条件码&lt;/th>
&lt;th>助记符后缀&lt;/th>
&lt;th>标志&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0000&lt;/td>
&lt;td>EQ&lt;/td>
&lt;td>Z置位&lt;/td>
&lt;td>相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0001&lt;/td>
&lt;td>NE&lt;/td>
&lt;td>Z清零&lt;/td>
&lt;td>不相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0010&lt;/td>
&lt;td>CS&lt;/td>
&lt;td>C置位&lt;/td>
&lt;td>无符号数大于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0011&lt;/td>
&lt;td>CC&lt;/td>
&lt;td>C清零&lt;/td>
&lt;td>无符号数小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0100&lt;/td>
&lt;td>MI&lt;/td>
&lt;td>N置位&lt;/td>
&lt;td>负数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0101&lt;/td>
&lt;td>PL&lt;/td>
&lt;td>N清零&lt;/td>
&lt;td>正数或零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0110&lt;/td>
&lt;td>VS&lt;/td>
&lt;td>V置位&lt;/td>
&lt;td>溢出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>0111&lt;/td>
&lt;td>VC&lt;/td>
&lt;td>V清零&lt;/td>
&lt;td>未溢出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1000&lt;/td>
&lt;td>HI&lt;/td>
&lt;td>C置位Z清零&lt;/td>
&lt;td>无符号数大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1001&lt;/td>
&lt;td>LS&lt;/td>
&lt;td>C清零Z置位&lt;/td>
&lt;td>无符号数小于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1010&lt;/td>
&lt;td>GE&lt;/td>
&lt;td>N等于V&lt;/td>
&lt;td>带符号数大于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1011&lt;/td>
&lt;td>LT&lt;/td>
&lt;td>N不等于V&lt;/td>
&lt;td>带符号数小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1100&lt;/td>
&lt;td>GT&lt;/td>
&lt;td>Z清零且（N等于V）&lt;/td>
&lt;td>带符号数大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1101&lt;/td>
&lt;td>LE&lt;/td>
&lt;td>Z置位或（N不等于V）&lt;/td>
&lt;td>带符号数小于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1110&lt;/td>
&lt;td>AL&lt;/td>
&lt;td>忽略&lt;/td>
&lt;td>无条件执行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="程序结构">程序结构&lt;/h3>
&lt;p>Android平台采用的是GUN ARM汇编格式，汇编器为GAS&lt;/p>
&lt;p>参数传递：R0-R3这4个寄存器用来传递函数调用的第1到4个参数，超出的参数通过堆栈来传递。R0还用来存放函数调用的返回值。&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810112712.gif"
loading="lazy"
>&lt;/p>
&lt;h5 id="汇编器指令">汇编器指令&lt;/h5>
&lt;ul>
&lt;li>&lt;code>.file&lt;/code>:源文件名&lt;/li>
&lt;li>&lt;code>.align&lt;/code>:代码对齐方式&lt;/li>
&lt;li>&lt;code>.ascii&lt;/code>:声明字符串&lt;/li>
&lt;li>&lt;code>.global&lt;/code>:声明全局符号&lt;/li>
&lt;li>&lt;code>.type&lt;/code>：指定符号的类型&lt;/li>
&lt;li>&lt;code>.word&lt;/code>：存放地址值&lt;/li>
&lt;li>&lt;code> .size&lt;/code>：设置指定符号的大小&lt;/li>
&lt;li>&lt;code>.ident&lt;/code>：编译器标识&lt;/li>
&lt;/ul>
&lt;h3 id="寻址方式">寻址方式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>立即寻址&lt;/p>
&lt;p>&lt;code>MOV R0, #1234&lt;/code> -&amp;gt;R0=1234&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器寻址&lt;/p>
&lt;p>&lt;code>MOV R1 = R2&lt;/code> -&amp;gt;R0=R1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器移位寻址&lt;/p>
&lt;ul>
&lt;li>LSL ：逻辑左移，移位后寄存器空出的低位补0&lt;/li>
&lt;li>LSR：逻辑右移，移位后寄存器空出的高位补0&lt;/li>
&lt;li>ASR：算术右移，移位过程中符号位保持不变，若源操作数为正数，则移位后空出的高位补0，否则补1。&lt;/li>
&lt;li>ROR：循环右移，移位后移出的低位填入移位空出的高位。&lt;/li>
&lt;li>RRX：带扩展的循环右移，操作数右移一位，移出的空位用C标志的值填充。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>MOV R0, R1, LSL #2 &lt;/code> -&amp;gt;R1左移两位（R1&amp;laquo;2）赋值给R0,相当于R0 = R1*4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>寄存器间接寻址&lt;/p>
&lt;p>&lt;code>LDR RO, [R1]&lt;/code> -&amp;gt;将R1寄存器的数值作为地址，取出此地址中的值赋给R0寄存器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>基址寻址&lt;/p>
&lt;p>多用于查表、数组访问操作。&lt;/p>
&lt;p>&lt;code>LDR R0, [R1,#-4]&lt;/code> -&amp;gt;将R1寄存器的数值减4作为地址，取出此地址的值赋给R0寄存器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多寄存器寻址&lt;/p>
&lt;p>一条指令最多完成16个通用寄存器值的传送。&lt;/p>
&lt;p>&lt;code>LDMIA R0,{R1,R2,R3,R4}&lt;/code> -&amp;gt;LDM为数据加载指令，指令的后缀IA表示每次执行完加载操作后R0寄存器的值自增1个字，ARM指令集中，子表示的是一个32位数值。这条指令作用为：R1 = [R0],R2 = [R0+#4],R3 = [R0+#8],R4 = [R0+#12]。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆栈寻址&lt;/p>
&lt;p>特定的指令来完成：&lt;code>LDMFA/STMFA&lt;/code>、&lt;code>LDMEA/STMEA&lt;/code>、&lt;code>LDMFD/STMFD&lt;/code>、&lt;code>LDMED/STMED&lt;/code>。&lt;/p>
&lt;p>LDM和STM为指令前缀，表示多寄存器寻址，即一次传送多个寄存器的值。后面的后缀为指令后缀。&lt;/p>
&lt;p>&lt;code>STMFD SP!, {R1-R7,LR}&lt;/code> -&amp;gt;将R1~R7,LR入栈，多用于保存子程序的现场。&lt;/p>
&lt;p>&lt;code>LDMFD SP!, {R1-R7,LR}&lt;/code> -&amp;gt;出栈，恢复现场。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>块拷贝寻址&lt;/p>
&lt;p>实现从连续地址数据从存储器的某一位置拷贝到另外一个位置，指令有：&lt;code>LDMIA/STMIA&lt;/code>、&lt;code>LDMDA/STMDA&lt;/code>、&lt;code>LDMIB/STMIB&lt;/code>、&lt;code>LDMDB/STMDB&lt;/code>。&lt;/p>
&lt;p>&lt;code>LDMIA R0! {R0-R3}&lt;/code> 从R0寄存器指向的存储单元中读取3个字到R1-R3寄存器&lt;/p>
&lt;p>&lt;code>STMIA R0! {R0-R3}&lt;/code> 存储从R1-R3寄存器的内容到R0寄存器指向的存储单元&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相对寻址&lt;/p>
&lt;p>以程序计数器PC的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到操作数的有效地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">BL&lt;/span> &lt;span class="no">NEXT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">····&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">NEXT:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">········&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="arm和thumb指令集">ARM和Thumb指令集&lt;/h3>
&lt;h5 id="基本指令简述">基本指令简述&lt;/h5>
&lt;p>&lt;code>MNEMONIC{S}{condition} {Rd}, Operand1, Operand2 &lt;/code>&lt;/p>
&lt;p>&lt;code>助记符{是否使用CPSR}{是否条件执行以及条件} {目的寄存器}, 操作符1, 操作符2 &lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>MNEMONIC     - 指令的助记符如ADD&lt;/p>
&lt;p>{S}           - 可选的扩展位，如果指令后加了S，则需要依据计算结果更新CPSR寄存器中的条件跳转相关 的FLAG&lt;/p>
&lt;p>{condition}   - 如果机器码要被条件执行，那它需要满足的条件标示&lt;/p>
&lt;p>{Rd}          - 存储结果的目的寄存器&lt;/p>
&lt;p>Operand1     - 第一个操作数，寄存器或者是一个立即数&lt;/p>
&lt;p>Operand2     - 第二个(可变的)操作数，可以是一个立即数或者寄存器或者有偏移量的寄存器&lt;/p>
&lt;/blockquote>
&lt;p>第二操作数还有如下操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#123 - 立即数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">Rx&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">寄存器比如&lt;/span>&lt;span class="no">R1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">Rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ASR&lt;/span> &lt;span class="no">n&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">对寄存器中的值进行算术右移&lt;/span>&lt;span class="no">n位后的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">Rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSL&lt;/span> &lt;span class="no">n&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">对寄存器中的值进行逻辑左移&lt;/span>&lt;span class="no">n位后的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">Rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSR&lt;/span> &lt;span class="no">n&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">对寄存器中的值进行逻辑右移&lt;/span>&lt;span class="no">n位后的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">Rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">ROR&lt;/span> &lt;span class="no">n&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">对寄存器中的值进行循环右移&lt;/span>&lt;span class="no">n位后的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">Rx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">RRX&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">对寄存器中的值进行带扩展的循环右移&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="err">位后的值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ADD&lt;/span> &lt;span class="no">R0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">R1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">R2&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="err">将第一操作数&lt;/span>&lt;span class="no">R1的内容与第二操作数R2的内容相加&lt;/span>&lt;span class="err">，将结果存储到&lt;/span>&lt;span class="no">R0中&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ADD&lt;/span> &lt;span class="no">R0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">R1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#2 - 将第一操作数R1的内容与第二操作数一个立即数相加，将结果存到R0中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOVLE&lt;/span> &lt;span class="no">R0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#5 - 当满足条件LE(Less and Equal,小于等于0)将第二操作数立即数5移动到R0中,注意这条指令与MOVLE R0, R0, #5相同
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">MOV&lt;/span> &lt;span class="no">R0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">R1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSL&lt;/span> &lt;span class="c1">#1 - 将第二操作数R1寄存器中的值逻辑左移1位后存入R0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810144732.png"
loading="lazy"
>&lt;/p>
&lt;h5 id="内存访问相关指令">内存访问相关指令&lt;/h5>
&lt;p>通常，LDR被用来从内存中加载数据到寄存器，STR被用作将寄存器的值存放到内存中。&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810145231.png"
loading="lazy"
>&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="na">.data&lt;/span> &lt;span class="cm">/* 数据段是在内存中动态创建的，所以它的在内存中的地址不可预测*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="cm">/* 内存中的第一个变量 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="cm">/* 内存中的第二个变量 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.text&lt;/span> &lt;span class="cm">/* 代码段开始 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var1&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var1值的地址adr_var1加载到寄存器R0中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var2&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var2值的地址adr_var2加载到寄存器R1中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="no">R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="no">R2中的值0x3存放到R1做指向的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">bkpt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="no">adr_var1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">.word&lt;/span> &lt;span class="no">var1&lt;/span> &lt;span class="cm">/* var1的地址助记符 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var2&lt;/span> &lt;span class="cm">/* var2的地址助记符 */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810145711.gif"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810154906.png"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一种偏移形式：立即数作偏移&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">STR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">imm&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">LDR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">imm&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var1&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var1值的地址adr_var1加载到寄存器R0中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var2&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var2值的地址adr_var2加载到寄存器R1中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="no">R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#2] @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加2所指向地址处。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#4]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加4所指向地址处，之后R1寄存器中存储的值加4,也就是R1=R1+4。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="c1">#4 @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中存储的值加4,也就是R1=R1+4。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">bkpt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810160844.gif"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>第二种偏移形式：寄存器作偏移&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">STR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Rc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">LDR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Rc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="na">.data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var1&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var1值的地址adr_var1加载到寄存器R0中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var2&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var2值的地址adr_var2加载到寄存器R1中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="no">R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">取址模式：基于偏移量。&lt;/span>&lt;span class="no">R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处&lt;/span>&lt;span class="err">。&lt;/span>&lt;span class="no">R1寄存器不会被修改&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">]!&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">取址模式：基于索引前置修改。&lt;/span>&lt;span class="no">R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处&lt;/span>&lt;span class="err">，之后&lt;/span>&lt;span class="no">R1寄存器中的值被更新&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="err">也就是&lt;/span>&lt;span class="no">R1&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="no">R1&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">R2&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">r2&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">取址模式：基于索引后置修改。&lt;/span>&lt;span class="no">R3寄存器中的值是从R1寄存器的值所指向的地址中加载的&lt;/span>&lt;span class="err">，加载之后&lt;/span>&lt;span class="no">R1寄存器中的值被更新也就是R1&lt;/span>&lt;span class="err">=&lt;/span>&lt;span class="no">R1&lt;/span>&lt;span class="err">+&lt;/span>&lt;span class="no">R2&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bx&lt;/span> &lt;span class="no">lr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810162217.gif"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第三种偏移形式：寄存器缩放值作偏移&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">LDR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Rc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">shifter&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">STR&lt;/span> &lt;span class="no">Ra&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">Rb&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">Rc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="no">shifter&lt;/span>&lt;span class="err">&amp;gt;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="na">.data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var1&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var1值的地址adr_var1加载到寄存器R0中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">adr_var2&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将存放&lt;/span>&lt;span class="no">var2值的地址adr_var2加载到寄存器R1中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">ldr&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="err">@&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="no">R0所指向地址中存放的0x3加载到寄存器R2中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSL&lt;/span>&lt;span class="c1">#2] @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">str&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSL&lt;/span>&lt;span class="c1">#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 = R1 + R2&amp;lt;&amp;lt;2。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="no">r1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">LSL&lt;/span>&lt;span class="c1">#2 @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中的值被更新也就是R1 = R1 + R2&amp;lt;&amp;lt;2。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">bkpt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var1:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">adr_var2:&lt;/span> &lt;span class="na">.word&lt;/span> &lt;span class="no">var2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180810162414.png"
loading="lazy"
>&lt;/p>
&lt;p>如何区分取址模式：&lt;/p>
&lt;p>如果有一个叹号!，那就是索引前置取址模式，即使用计算后的地址，之后更新基址寄存器。&lt;/p>
&lt;p>如果在[]外有一个寄存器，那就是索引后置取址模式，即使用原有基址寄存器重的地址，之后再更新基址寄存器&lt;/p>
&lt;p>除此之外，就都是偏移取址模式了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>关于PC相对取址的LDR指令&lt;/strong>&lt;/p>
&lt;p>有时候LDR并不仅仅被用来从内存中加载数据。还有如下这操作:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="na">.section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="no">jump&lt;/span> &lt;span class="cm">/* 加载jump标签所在的内存位置到R0 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="mi">0x68DB00AD&lt;/span> &lt;span class="cm">/* 加载立即数0x68DB00AD到R1 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">jump:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="mi">511&lt;/span> &lt;span class="cm">/* 加载立即数511到R2 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">bkpt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些指令学术上被称作伪指令。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>在ARM中使用立即数的规律&lt;/strong>&lt;/p>
&lt;p>在ARM中不能像X86那样直接将立即数加载到寄存器中。因为你使用的立即数是受限的。&lt;/p>
&lt;p>立即数的值：v = n ror 2*r 有效的立即数都可以通过循环右移来得到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#256 // 1 循环右移 24位 --&amp;gt; 256
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#384 // 6 循环右移 26位 --&amp;gt; 384
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#484 // 121 循环右移 30位 --&amp;gt; 484
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#16384 // 1 循环右移 18位 --&amp;gt; 16384
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2030043136 // 121 循环右移 8位 --&amp;gt; 2030043136
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0x06000000 // 6 循环右移 8位 --&amp;gt; 100663296 (十六进制值0x06000000)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">Invalid&lt;/span> &lt;span class="no">values&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#370 // 185 循环右移 31位 --&amp;gt; 31不在范围内 (0 – 30)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#511 // 1 1111 1111 --&amp;gt; 比特模型不符合
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0x06010000 // 1 1000 0001.. --&amp;gt; 比特模型不符合
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样并不能一次性加载所有的32位值。不过我们可以通过以下的两个选项来解决这个问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>用小部分去组成更大的值。  MOV r0, #511 将511分成两部分：MOV r0, #256, and ADD r0, #255&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="na">.section&lt;/span> &lt;span class="no">.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">.global&lt;/span> &lt;span class="no">_start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">_start:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">mov&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#256 /* 1 ror 24 = 256, so it&amp;#39;s valid */
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">add&lt;/span> &lt;span class="no">r0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">#255 /* 255 ror 0 = 255, valid. r0 = 256 + 255 = 511 */
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">ldr&lt;/span> &lt;span class="no">r1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">=&lt;/span>&lt;span class="mi">511&lt;/span> &lt;span class="cm">/* load 511 from the literal pool using LDR */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">bkpt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>计算立即数的有效值脚本：https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">azeria@labs:~$ python rotator.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter the value you want to check: &lt;span class="m">511&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Sorry, &lt;span class="m">511&lt;/span> cannot be used as an immediate number and has to be split.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">azeria@labs:~$ python rotator.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter the value you want to check: &lt;span class="m">256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The number &lt;span class="m">256&lt;/span> can be used as a valid immediate number.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> ror &lt;span class="m">24&lt;/span> --&amp;gt; &lt;span class="m">256&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>下面的部分指令用到在详细查，记的话脑壳痛&lt;/p>
&lt;h5 id="跳转指令">跳转指令&lt;/h5>
&lt;ol>
&lt;li>&lt;code>B&lt;/code>&lt;/li>
&lt;li>&lt;code>BL&lt;/code>&lt;/li>
&lt;li>&lt;code>BX&lt;/code>&lt;/li>
&lt;li>&lt;code>BXL&lt;/code>&lt;/li>
&lt;/ol>
&lt;h5 id="存储器操作指令">存储器操作指令&lt;/h5>
&lt;ol>
&lt;li>&lt;code>LDM&lt;/code>&lt;/li>
&lt;li>&lt;code>STM&lt;/code>&lt;/li>
&lt;li>&lt;code>PUSH&lt;/code>&lt;/li>
&lt;li>&lt;code>POP&lt;/code>&lt;/li>
&lt;li>&lt;code>SWP&lt;/code>&lt;/li>
&lt;/ol>
&lt;h5 id="数据处理">数据处理&lt;/h5>
&lt;ol>
&lt;li>&lt;code>MOV&lt;/code>&lt;/li>
&lt;li>&lt;code>MVN&lt;/code>&lt;/li>
&lt;li>&lt;code>ADD&lt;/code>&lt;/li>
&lt;li>&lt;code>ADC&lt;/code>&lt;/li>
&lt;li>&lt;code>SUB&lt;/code>&lt;/li>
&lt;li>&lt;code>RSB&lt;/code>&lt;/li>
&lt;li>&lt;code>SBC&lt;/code>&lt;/li>
&lt;li>&lt;code>RSC&lt;/code>&lt;/li>
&lt;li>&lt;code>MUL&lt;/code>&lt;/li>
&lt;li>&lt;code>MLS&lt;/code>&lt;/li>
&lt;li>&lt;code>MLA&lt;/code>&lt;/li>
&lt;li>&lt;code>UMULL&lt;/code>&lt;/li>
&lt;li>&lt;code>UMLAL&lt;/code>&lt;/li>
&lt;li>&lt;code>SMUULL&lt;/code>&lt;/li>
&lt;li>&lt;code>SMLAL&lt;/code>&lt;/li>
&lt;li>&lt;code>SMLAD&lt;/code>&lt;/li>
&lt;li>&lt;code>SMLSD&lt;/code>&lt;/li>
&lt;li>&lt;code>SDIV&lt;/code>&lt;/li>
&lt;li>&lt;code>UDIV&lt;/code>&lt;/li>
&lt;li>&lt;code>ASR&lt;/code>&lt;/li>
&lt;li>&lt;code>AND&lt;/code>&lt;/li>
&lt;li>&lt;code>ORR&lt;/code>&lt;/li>
&lt;li>&lt;code>EOR&lt;/code>&lt;/li>
&lt;li>&lt;code>BIC&lt;/code>&lt;/li>
&lt;li>&lt;code>LSL&lt;/code>&lt;/li>
&lt;li>&lt;code>LSR&lt;/code>&lt;/li>
&lt;li>&lt;code>RRX&lt;/code>&lt;/li>
&lt;li>&lt;code>ROR&lt;/code>&lt;/li>
&lt;li>&lt;code>CMP&lt;/code>&lt;/li>
&lt;li>&lt;code>CMN&lt;/code>&lt;/li>
&lt;li>&lt;code>TSL&lt;/code>&lt;/li>
&lt;li>&lt;code>TEQ&lt;/code>&lt;/li>
&lt;/ol>
&lt;h5 id="其他指令">其他指令&lt;/h5>
&lt;ol>
&lt;li>
&lt;p>&lt;code>SWI&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>NOP&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MRS&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MSR&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="heading">&lt;/h3>
&lt;/li>
&lt;/ul></description></item><item><title>QEMU的安装使用</title><link>https://ykiko.top/p/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 09 Aug 2018 19:34:34 +0800</pubDate><guid>https://ykiko.top/p/qemu%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="qemu的安装使用">QEMU的安装使用&lt;/h1>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>WIndows：https://qemu.weilnetz.de/w64/ 下载exe安装就行&lt;/p>
&lt;p>MACOS:&lt;code>brew install qemu&lt;/code> or &lt;code>sudo port install qemu&lt;/code>&lt;/p>
&lt;p>LINUX：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Arch:&lt;/strong> &lt;code>pacman -S qemu&lt;/code>&lt;/li>
&lt;li>&lt;strong>Debian/Ubuntu:&lt;/strong> &lt;code>apt-get install qemu&lt;/code>&lt;/li>
&lt;li>&lt;strong>Fedora:&lt;/strong> &lt;code>dnf install @virtualization&lt;/code>&lt;/li>
&lt;li>&lt;strong>Gentoo:&lt;/strong> &lt;code>emerge --ask app-emulation/qemu&lt;/code>&lt;/li>
&lt;li>&lt;strong>RHEL/CentOS:&lt;/strong> &lt;code>yum install qemu-kvm&lt;/code>&lt;/li>
&lt;li>&lt;strong>SUSE:&lt;/strong> &lt;code>zypper install qemu&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>源码安装：https://download.qemu.org/&lt;/p>
&lt;p>wget&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wget https://download.qemu.org/qemu-3.0.0-rc1.tar.xz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar xvJf qemu-3.0.0-rc1.tar.xz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd qemu-3.0.0-rc1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./configure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>git&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-v" data-lang="v">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">git&lt;/span> &lt;span class="nv">clone&lt;/span> &lt;span class="nv">git&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//git.qemu.org/qemu.git
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nv">cd&lt;/span> &lt;span class="nv">qemu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">git&lt;/span> &lt;span class="nv">submodule&lt;/span> &lt;span class="nv">init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">git&lt;/span> &lt;span class="nv">submodule&lt;/span> &lt;span class="nv">update&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nv">recursive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nv">configure&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">make&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最新的开发发生在主分支上。稳定的树位于名为“稳定x”的分支中。YY分支,X。YY是发布版本。&lt;/p>
&lt;h3 id="树莓派内核制作在windows上">树莓派内核制作（在windows上)&lt;/h3>
&lt;p>下载树莓派系统：http://downloads.raspberrypi.org/raspbian/images/&lt;/p>
&lt;p>下载qume 的树莓派内核： &lt;a class="link" href="https://github.com/dhruvvyas90/qemu-rpi-kernel" target="_blank" rel="noopener"
>https://github.com/dhruvvyas90/qemu-rpi-kernel&lt;/a> 改名为kernel-qemu放在和系统镜像同目录下&lt;/p>
&lt;p>放在了raspbia目录下&lt;/p>
&lt;p>&lt;code>qemu-system-arm.exe -kernel kernel-qemu -cpu arm1176 -m 512 -M versatilepb -dtbversatile-pb.dtb -no-reboot -append &amp;quot;root=/dev/sda2 panic=1rootfstype=ext4 rw&amp;quot; -net nic -net user,hostfwd=tcp::5022-:22 -hda 2018-06-27-raspbian-stretch.img &lt;/code>&lt;/p>
&lt;p>注意自己下载的镜像版本&lt;/p>
&lt;h3 id="linux上">Linux上&lt;/h3>
&lt;p>待补充。。。&lt;/p></description></item></channel></rss>