<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OLLVM on ykikoqAq</title><link>https://ykiko.top/tags/ollvm/</link><description>Recent content in OLLVM on ykikoqAq</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 10 Sep 2018 20:39:26 +0800</lastBuildDate><atom:link href="https://ykiko.top/tags/ollvm/index.xml" rel="self" type="application/rss+xml"/><item><title>OLLVM 混淆之一</title><link>https://ykiko.top/p/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</link><pubDate>Mon, 10 Sep 2018 20:39:26 +0800</pubDate><guid>https://ykiko.top/p/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</guid><description>&lt;h3 id="ollvm">OLLVM&lt;/h3>
&lt;p>OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个针对LLVM代码混淆项目， 用于增加逆向难度，保护代码的安全。最新版本为&lt;a class="link" href="https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0" target="_blank" rel="noopener"
>4.0&lt;/a>。OLLVM适用LLVM支持的所有语言（C, C++, Objective-C, Ada 和 Fortran）和目标平台（x86, x86-64, PowerPC, PowerPC-64, ARM, Thumb, SPARC, Alpha, CellSPU, MIPS, MSP430, SystemZ, 和 XCore）。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://llvm.org/" target="_blank" rel="noopener"
>LLVM&lt;/a>是lowlevel virtual machine的简称，是一个编译器框架。详细介绍可以看&lt;a class="link" href="https://zh.wikipedia.org/wiki/LLVM" target="_blank" rel="noopener"
>WIKI-LLVM&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180823112535.png"
loading="lazy"
>&lt;/p>
&lt;p>经典的三段式设计，前端使用不同的编译工具对代码进行分析转换成LLVM的中间表示IR（intermediate representation）。中间部分优化器只对IR进行操作，通过一系列的Pass对IR做优化。后端主要是讲优化好的IR解释成对应的机器码。&lt;/p>
&lt;p>对IR的处理过程下图：&lt;/p>
&lt;p>&lt;img src="http://my-md-1253484710.coscd.myqcloud.com/20180823113111.png"
loading="lazy"
alt="IR Pass"
>&lt;/p>
&lt;p>OLLVM的混淆操作在IR层，通过编写Pass来混淆IR，以致后端生成的目标代码也被混淆了。&lt;/p>
&lt;h3 id="ollvm-android环境搭建">OLLVM-Android环境搭建&lt;/h3>
&lt;p>前提环境：&lt;/p>
&lt;ul>
&lt;li>NDK环境&lt;/li>
&lt;li>LLVM&lt;/li>
&lt;/ul>
&lt;p>下载源码(包括了LLVM和Clang)-编译OLLVM步骤如下：&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cmake -DCMAKE_BUILD_TYPE&lt;span class="o">=&lt;/span>Release ../obfuscator/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//（cmake -G &lt;span class="s2">&amp;#34;MinGW Makefiles&amp;#34;&lt;/span> -DCMAKE_BUILD_TYPE&lt;span class="o">=&lt;/span>Release ../obfuscator/）&lt;span class="o">(&lt;/span>windows&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ make -j7 //这个数字自己看自己CPU填 太小可能非常编译慢
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;p>可以参照&lt;a class="link" href="https://github.com/obfuscator-llvm/obfuscator/wiki" target="_blank" rel="noopener"
>官方wiki&lt;/a>来操作。编译完成后，二进制文件放在build/bin目录下。&lt;/p>
&lt;p>配置整合NDK：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开NDK目录ndk-bundle下的toolchains，新建obfuscator-llvm-4，将llvm文件夹里的所有文件复制到新建的目录下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将&lt;code>\build\bin&lt;/code>目录下的&lt;code>clang.exe&lt;/code>、&lt;code>clang++.exe&lt;/code>和&lt;code>clang-format.exe&lt;/code>复制到&lt;code>\toolchains\llvm\prebuilt\windows-x86_64\bin&lt;/code>目录下，直接替换掉其中的文件。（Windows下）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>（linux下)将llvm目录下的prebuilt目录和文件 config.mk、setup.mk和setup-common.mk拷贝到创建的obfuscator-llvm目录下-&amp;gt;然后替换obfuscator-llvm/prebuilt/linux-x86下的bin和lib为我们编译好的bin和lib&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后将下面文件复制一份，改名称如下，比如arm-linux-androideabi-clang3.4复制一行改名为arm-linux-androideabi-obfuscator3.4&lt;/p>
&lt;p>arm-linux-androideabi-clang3.4-&amp;gt; arm-linux-androideabi-obfuscator3.4&lt;/p>
&lt;p>mipsel-linux-android-clang3.4-&amp;gt; mipsel-linux-android-obfuscator3.4&lt;/p>
&lt;p>x86-clang3.4-&amp;gt; x86-obfuscator3.4&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分别修改以上三个文件的 setup.mk 中的 LLVM_NAME ，即将其指定到开始建立的obfuscator-llvm-3.4目录，也就是把把&lt;code>LLVM_NAME := llvm-$(LLVM_VERSION)改成LLVM_NAME := obfuscator-llvm-$(LLVM_VERSION)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是配置64位的ndk配置,还要额外修改$NDK_PATH/build/core/setup-toolchain.mk文件，在NDK_64BIT_TOOLCHAIN_LIST := 加入 obfuscator 对应的NDK_TOOLCHAIN_VERSION NDK_64BIT_TOOLCHAIN_LIST := obfuscator3.4 clang3.6 clang3.5 clang3.4 4.9'&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="开始使用ollvm">开始使用OLLVM&lt;/h3>
&lt;h3 id="参考">参考&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="http://www.freebuf.com/articles/terminal/130142.html" target="_blank" rel="noopener"
>http://www.freebuf.com/articles/terminal/130142.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/" target="_blank" rel="noopener"
>https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.jmpoep.com/thread-4016-1-1.html" target="_blank" rel="noopener"
>https://www.jmpoep.com/thread-4016-1-1.html&lt;/a>&lt;/li>
&lt;li>BCTFhttp://ele7enxxh.com/Bctf-2016-LostFlower-Writeup.html&lt;/li>
&lt;/ul></description></item></channel></rss>