<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>LLVM on ykikoqAq</title>
        <link>https://ykiko.top/categories/llvm/</link>
        <description>Recent content in LLVM on ykikoqAq</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 10 Sep 2018 20:39:26 +0800</lastBuildDate><atom:link href="https://ykiko.top/categories/llvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>OLLVM 混淆之一</title>
        <link>https://ykiko.top/p/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</link>
        <pubDate>Mon, 10 Sep 2018 20:39:26 +0800</pubDate>
        
        <guid>https://ykiko.top/p/ollvm-%E6%B7%B7%E6%B7%86%E4%B9%8B%E4%B8%80/</guid>
        <description>&lt;h3 id=&#34;ollvm&#34;&gt;OLLVM&lt;/h3&gt;
&lt;p&gt;OLLVM(Obfuscator-LLVM)是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个针对LLVM代码混淆项目， 用于增加逆向难度，保护代码的安全。最新版本为&lt;a class=&#34;link&#34; href=&#34;https://github.com/obfuscator-llvm/obfuscator/tree/llvm-4.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;4.0&lt;/a&gt;。OLLVM适用LLVM支持的所有语言（C, C++, Objective-C, Ada 和 Fortran）和目标平台（x86, x86-64, PowerPC, PowerPC-64, ARM, Thumb, SPARC, Alpha, CellSPU, MIPS, MSP430, SystemZ, 和 XCore）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://llvm.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LLVM&lt;/a&gt;是lowlevel virtual machine的简称，是一个编译器框架。详细介绍可以看&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/LLVM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WIKI-LLVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180823112535.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;经典的三段式设计，前端使用不同的编译工具对代码进行分析转换成LLVM的中间表示IR（intermediate representation）。中间部分优化器只对IR进行操作，通过一系列的Pass对IR做优化。后端主要是讲优化好的IR解释成对应的机器码。&lt;/p&gt;
&lt;p&gt;对IR的处理过程下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://my-md-1253484710.coscd.myqcloud.com/20180823113111.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;IR Pass&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OLLVM的混淆操作在IR层，通过编写Pass来混淆IR，以致后端生成的目标代码也被混淆了。&lt;/p&gt;
&lt;h3 id=&#34;ollvm-android环境搭建&#34;&gt;OLLVM-Android环境搭建&lt;/h3&gt;
&lt;p&gt;前提环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NDK环境&lt;/li&gt;
&lt;li&gt;LLVM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载源码(包括了LLVM和Clang)-编译OLLVM步骤如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mkdir build
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; build
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cmake -DCMAKE_BUILD_TYPE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Release ../obfuscator/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//（cmake -G &lt;span class=&#34;s2&#34;&gt;&amp;#34;MinGW Makefiles&amp;#34;&lt;/span&gt; -DCMAKE_BUILD_TYPE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Release ../obfuscator/）&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;windows&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make -j7   //这个数字自己看自己CPU填 太小可能非常编译慢 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;可以参照&lt;a class=&#34;link&#34; href=&#34;https://github.com/obfuscator-llvm/obfuscator/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方wiki&lt;/a&gt;来操作。编译完成后，二进制文件放在build/bin目录下。&lt;/p&gt;
&lt;p&gt;配置整合NDK：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开NDK目录ndk-bundle下的toolchains，新建obfuscator-llvm-4，将llvm文件夹里的所有文件复制到新建的目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;\build\bin&lt;/code&gt;目录下的&lt;code&gt;clang.exe&lt;/code&gt;、&lt;code&gt;clang++.exe&lt;/code&gt;和&lt;code&gt;clang-format.exe&lt;/code&gt;复制到&lt;code&gt;\toolchains\llvm\prebuilt\windows-x86_64\bin&lt;/code&gt;目录下，直接替换掉其中的文件。（Windows下）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（linux下)将llvm目录下的prebuilt目录和文件 config.mk、setup.mk和setup-common.mk拷贝到创建的obfuscator-llvm目录下-&amp;gt;然后替换obfuscator-llvm/prebuilt/linux-x86下的bin和lib为我们编译好的bin和lib&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后将下面文件复制一份，改名称如下，比如arm-linux-androideabi-clang3.4复制一行改名为arm-linux-androideabi-obfuscator3.4&lt;/p&gt;
&lt;p&gt;arm-linux-androideabi-clang3.4-&amp;gt; arm-linux-androideabi-obfuscator3.4&lt;/p&gt;
&lt;p&gt;mipsel-linux-android-clang3.4-&amp;gt; mipsel-linux-android-obfuscator3.4&lt;/p&gt;
&lt;p&gt;x86-clang3.4-&amp;gt; x86-obfuscator3.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分别修改以上三个文件的 setup.mk 中的 LLVM_NAME ，即将其指定到开始建立的obfuscator-llvm-3.4目录，也就是把把&lt;code&gt;LLVM_NAME := llvm-$(LLVM_VERSION)改成LLVM_NAME := obfuscator-llvm-$(LLVM_VERSION)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是配置64位的ndk配置,还要额外修改$NDK_PATH/build/core/setup-toolchain.mk文件，在NDK_64BIT_TOOLCHAIN_LIST := 加入 obfuscator 对应的NDK_TOOLCHAIN_VERSION NDK_64BIT_TOOLCHAIN_LIST := obfuscator3.4 clang3.6 clang3.5 clang3.4 4.9&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;开始使用ollvm&#34;&gt;开始使用OLLVM&lt;/h3&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.freebuf.com/articles/terminal/130142.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.freebuf.com/articles/terminal/130142.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.jmpoep.com/thread-4016-1-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jmpoep.com/thread-4016-1-1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BCTFhttp://ele7enxxh.com/Bctf-2016-LostFlower-Writeup.html&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
